#!/usr/bin/env php
<?php

namespace xy2z\Capro;

// Start Timer
use xy2z\Capro\Commands\CommandBuild;
use xy2z\Capro\Commands\CommandNewSite;
use xy2z\Capro\Commands\CommandConfig;
use xy2z\Capro\Commands\CommandServe;
use xy2z\Capro\Config;
use xy2z\Capro\Helpers;
use Dotenv\Dotenv;

// Call bootstrap to check if we should use capro shortcut for vendor/bin/capro.
define('CAPRO_START_TIME', microtime(true));
define('CAPRO_DIR', __DIR__);
define('CAPRO_SITE_ROOT_DIR', getcwd() . DIRECTORY_SEPARATOR); // The "user's" current working site root directory.
define('CAPRO_PHAR_SCOPE', ''); // Constant be replaced in the phar build with the unique scope. (see scoper.inc.php patchers)

require __DIR__ . '/src/capro_bootstrap.php';

// Autoload.php (for box/phar and development of capro)
if (file_exists(__DIR__ . '/vendor/autoload.php')) {
	require_once __DIR__ . '/vendor/autoload.php';
} else {
	echo 'Error: Composer\'s vendor/autoload.php file was not found. (try `composer install`)' . PHP_EOL;
	exit(1);
}

// Autoload "client's" autoload.php for their project.
if (file_exists(CAPRO_SITE_ROOT_DIR . 'vendor/autoload.php')) {
	require_once CAPRO_SITE_ROOT_DIR . 'vendor/autoload.php';
}

// Load env (before config)
if (file_exists(CAPRO_SITE_ROOT_DIR . '.env')) {
	$dotenv = Dotenv::createImmutable(CAPRO_SITE_ROOT_DIR);
	try {
		$dotenv->load();
	} catch (\Exception $e) {
		// Do nothing
		Helpers::tell_error('Invalid .env file. Error message: ' . $e->getMessage());
	}
}

// Load config
define('CAPRO_CONFIG_DIR', CAPRO_SITE_ROOT_DIR . 'config');
if (is_dir(CAPRO_CONFIG_DIR)) {
	Config::load_capro_config();
}

// Set CONSTANTS from Config (or use defaults) -- after loading config.
// Can't use realpath() here because the directories might not exist yet.
define('CAPRO_PUBLIC_DIR', CAPRO_SITE_ROOT_DIR . Config::get('core.public_dir', 'public'));
define('CAPRO_VIEWS_DIR', CAPRO_SITE_ROOT_DIR . Config::get('core.views_dir', 'views'));
define('CAPRO_VIEWS_CACHE_DIR', CAPRO_SITE_ROOT_DIR . Config::get('core.views_cache_dir', 'views/cache'));
define('CAPRO_STATIC_DIR', CAPRO_SITE_ROOT_DIR . Config::get('core.static_dir', 'static'));

// Check if command argument is set.
$command = $argv[1] ?? null;
if (isset($command)) {
	$command = strtolower($command);
} else {
	Helpers::tell('Need a command.');
	exit;
}

// Run command.
match ($command) {
	'build', 'b' => (new CommandBuild($argv))->run(),
	'new' => (new CommandNewSite($argv))->run(),
	'config' => (new CommandConfig($argv))->run(),
	'serve' => (new CommandServe($argv))->run(),
	'where' => Helpers::tell(__DIR__),
	'-v', 'v', '--version', 'version' => Helpers::tell(CAPRO_VERSION),
	default => Helpers::tell('Unknown command.'),
};
